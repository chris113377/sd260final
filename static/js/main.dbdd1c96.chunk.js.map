{"version":3,"sources":["Header.js","DisplayConversion.jsx","DisplayChart.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","props","className","Fragment","onClick","changeView","DisplayConversion","useState","inp","setInp","cryptoChoice","setCryptoChoice","fiatChoice","setFiatChoice","type","name","id","placeholder","onChange","e","target","value","sendChoice","money","result","DisplayChart","history","Object","entries","forEach","key","push","date","amount","rel","href","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","fill","App","setHistory","setMoney","displayDefault","setDisplayDefault","setResult","a","async","axios","get","response","bpi","getHistory","crypt","fiat","num","crypto","price","getData","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dbdd1c96.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => (\r\n  <header className=\"app-header\">\r\n    <React.Fragment>\r\n      <h1 className=\"header-title\">Crypto Converter</h1>\r\n      <button className=\"header-btn\" onClick={props.changeView}>\r\n        Change View\r\n      </button>\r\n    </React.Fragment>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\n\r\nconst DisplayConversion = props => {\r\n  const [inp, setInp] = useState(0);\r\n  const [cryptoChoice, setCryptoChoice] = useState(\"\");\r\n  const [fiatChoice, setFiatChoice] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"app-body\">\r\n      <form className=\"app-form\">\r\n        <input\r\n          className=\"app-input\"\r\n          type=\"number\"\r\n          name=\"\"\r\n          id=\"\"\r\n          placeholder=\"Amount\"\r\n          onChange={e => setInp(e.target.value)}\r\n        ></input>\r\n        <select\r\n          className=\"crypto\"\r\n          onChange={e => setCryptoChoice(e.target.value)}\r\n        >\r\n          <option>Select Crypto</option>\r\n          <option value=\"BTC\">Bitcoin</option>\r\n          <option value=\"ETH\">Ethereum</option>\r\n          <option value=\"LTC\">Litecoin</option>\r\n        </select>\r\n\r\n        <select className=\"fiat\" onChange={e => setFiatChoice(e.target.value)}>\r\n          <option>Select currency</option>\r\n          <option value=\"USD\">US Dollars</option>\r\n          <option value=\"CAD\">Canadian Dollars</option>\r\n          <option value=\"EUR\">EU Euros</option>\r\n        </select>\r\n      </form>\r\n      <button\r\n        className=\"app-btn\"\r\n        onClick={() => props.sendChoice(cryptoChoice, fiatChoice, inp)}\r\n      >\r\n        Submit\r\n      </button>\r\n      <h1 className=\"app-result\">\r\n        {props.money} {props.result}\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayConversion;\r\n","import React from \"react\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip\r\n} from \"recharts\";\r\n\r\nconst DisplayChart = props => {\r\n  const history = [];\r\n  props.history &&\r\n    Object.entries(props.history).forEach(([key, value]) => {\r\n      history.push({ date: key, amount: value });\r\n    });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"coin\">\r\n        <span>\r\n          {\" \"}\r\n          Powered by{\" \"}\r\n          <a\r\n            className=\"link\"\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n            href=\"https://www.coindesk.com/price/\"\r\n          >\r\n            CoinDesk\r\n          </a>\r\n          .{\" \"}\r\n        </span>\r\n      </div>\r\n      <AreaChart\r\n        width={800}\r\n        height={500}\r\n        data={history}\r\n        margin={{\r\n          top: 10,\r\n          right: 30,\r\n          left: 0,\r\n          bottom: 0\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"date\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"amount\"\r\n          stroke=\"#8884d8\"\r\n          fill=\"#8884d8\"\r\n        />\r\n      </AreaChart>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DisplayChart;\r\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport DisplayConversion from \"./DisplayConversion.jsx\";\nimport DisplayChart from \"./DisplayChart.jsx\";\n\nfunction App() {\n  const [history, setHistory] = useState();\n  const [money, setMoney] = useState(\"\");\n  const [displayDefault, setDisplayDefault] = useState(true);\n  const [result, setResult] = useState(0);\n\n  async function getData(crypto, money, amount) {\n    const response = await axios.get(\n      `https://apiv2.bitcoinaverage.com/convert/global?from=${crypto}&to=${money}&amount=${amount}`\n    );\n\n    setResult(response.data.price);\n  }\n\n  async function getHistory() {\n    const response = await axios.get(\n      `https://api.coindesk.com/v1/bpi/historical/close.json`\n    );\n    setHistory(response.data.bpi);\n  }\n\n  const sendChoice = (crypt, fiat, num) => {\n    getData(crypt, fiat, num);\n    setMoney(fiat);\n  };\n\n  const changeView = () => {\n    getHistory();\n    setDisplayDefault(!displayDefault);\n  };\n\n  return (\n    <div className=\"app\">\n      <Header changeView={changeView} />\n      {displayDefault && (\n        <DisplayConversion\n          money={money}\n          result={result}\n          sendChoice={sendChoice}\n        />\n      )}\n      {!displayDefault && <DisplayChart history={history} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}